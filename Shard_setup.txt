Sharding Setup
4 shards with 3 replSets (replication factor of 3)
ie 12 mongod (shard servers)

We will run 4 mongos processes.
We will run 3 config servers.

Create directories for shards and for config servers
start config servers
mongod --configsvr --dbpath cfg0 --port 26050 --logpath log.cfg0 --logappend
mongod --configsvr --dbpath cfg1 --port 26051 --logpath log.cfg1 --logappend
mongod --configsvr --dbpath cfg2 --port 26052 --logpath log.cfg2 --logappend


start shard servers
mongodb --shardsvr --replSet a --dbpath xx --logpath yy --port 27000 --fork --logappend  --smallfiles --oplogsize 50
*12

start mongos processes
mongos --configdb c2:26050,c2:26061,c2:26052 --fork --logappend --logpath log.mongos0 (default port ie 27017)
*4			
(2)--port 26061
(3)--port 26062
(4)--port 26063

===================================
run the commands in run.sh scripts or modify and run the script.

echo
ps -A | grep mongo

echo 
tail -n 1 log.cfg0
tail -n 1 log.cfg1
tail -n 1 log.cfg2

echo
tail -n 1 log.a0
tail -n 1 log.a1
tail -n 1 log.a2
tail -n 1 log.b0
tail -n 1 log.b1
tail -n 1 log.b2
tail -n 1 log.c0
tail -n 1 log.c1
tail -n 1 log.c2
tail -n 1 log.d0
tail -n 1 log.d1
tail -n 1 log.d2

echo
tail -n 1 log.mongos0
tail -n 1 log.mongos1
tail -n 1 log.mongos2
tail -n 1 log.mongos3
============================

setup config db (this is the db that contains all metadata on servers including where all chunks/shards are etc..)
Note** using mongo now will connect to mongos (the acting gateway)

mongo

mongos>....

use config
show collections
sh.status()

use config

show collections

db.chunks.find()

db.shards.find()

sh.help()
==

initiate replica set
sh.addShard(replicasetname/one of the hostname)
sh.addShard(host)
sh.addShard(host:27000)												

unsharded collections reside on first shard
sh.shardCollection("dbname.collectionname",{_id:1,true}}
In shard collection , thr is always index on shard key

t.getIndexes()
t.ensureIndex({x:1})
t.find({"_id": ObjectId("")},{longer:0}).explain
might show query plan at cluster level showing which shard was queried.
t.ensureIndex(
